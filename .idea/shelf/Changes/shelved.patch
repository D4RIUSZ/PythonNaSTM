Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1704872308000)
+++ b/.idea/misc.xml	(date 1704872308000)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1704872308033)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1704872308033)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1704872308204)
+++ b/.idea/.gitignore	(date 1704872308204)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1705568728444)
+++ b/.idea/vcs.xml	(date 1705568728444)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/naSTM.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/naSTM.iml b/.idea/naSTM.iml
new file mode 100644
--- /dev/null	(date 1704872307902)
+++ b/.idea/naSTM.iml	(date 1704872307902)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
new file mode 100644
--- /dev/null	(date 1705518843269)
+++ b/main.py	(date 1705518843269)
@@ -0,0 +1,103 @@
+import tkinter as tk
+from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
+import matplotlib.pyplot as plt
+import serial
+import threading
+import time
+
+ser = serial.Serial('COM4', 115200)
+start_time = time.time()  # Zapisz czas startu
+
+def read_from_stm():
+    global global_pid_value
+    while True:
+        if ser.in_waiting:
+            line = ser.readline().decode('utf-8').rstrip()
+            print(f"Otrzymano dane: {line}")
+            try:
+                parts = line.split(', ')
+                if len(parts) > 0 and ": " in parts[0]:
+                    sensor_val_str = parts[0].split(': ')[1]
+                    sensor_val = float(sensor_val_str)
+                    y_values.append(sensor_val)
+                    # Zapisz czas w sekundach od startu
+                    current_time = time.time() - start_time
+                    x_values.append(current_time)
+
+                    pid_value = parts[-1].split(': ')[1]
+                    global_pid_value.set(pid_value)
+                else:
+                    print("Nieprawidłowy format danych")
+            except ValueError as e:
+                print(f"Błąd podczas parsowania danych: {line}. Szczegóły błędu: {e}")
+
+def write_to_stm():
+    while True:
+        command = f"Set Kp:{kp.get()} Ki:{ki.get()} Kd:{kd.get()} Setpoint:{set_point.get()}\n"
+        ser.write(command.encode('utf-8'))
+        time.sleep(1)
+
+def reset_plot():
+    global start_time
+    start_time = time.time()  # Resetuj czas startu
+    x_values.clear()
+    y_values.clear()
+    ax.clear()
+    ax.axhline(y=set_point.get(), color='r', linestyle='-', label="Wartość zadana")
+    ax.legend()
+    canvas.draw()
+
+def update_plot():
+    while True:
+        time.sleep(0.1)
+
+        if len(x_values) == len(y_values) and len(x_values) > 0:
+            ax.clear()
+            ax.set_title("Balancing Car")
+            ax.set_xlabel("Czas (s)")
+            ax.set_ylabel("Wartość z czujnika")
+            ax.plot(x_values, y_values, label="Czujnik")
+            ax.axhline(y=set_point.get(), color='r', linestyle='-', label="Wartość zadana")
+            ax.axhline(y=set_point.get() + 1.9, color='g', linestyle='--', label="5% Odchył")
+            ax.axhline(y=set_point.get() - 1.9, color='g', linestyle='--')
+            ax.legend()
+            canvas.draw()
+
+root = tk.Tk()
+root.title("Balancing Car")
+global_pid_value = tk.StringVar(value="0.0")
+
+kp = tk.DoubleVar(value=10.0)
+ki = tk.DoubleVar(value=0.1)
+kd = tk.DoubleVar(value=0.0)
+set_point = tk.DoubleVar(value=4)
+
+fig, ax = plt.subplots()
+canvas = FigureCanvasTkAgg(fig, master=root)
+widget = canvas.get_tk_widget()
+widget.grid(row=0, column=0, columnspan=4)
+
+tk.Label(root, text="Kp:").grid(row=1, column=0)
+tk.Scale(root, variable=kp, from_=10, to=100, resolution=1, orient=tk.HORIZONTAL).grid(row=1, column=1)
+tk.Label(root, text="Ki:").grid(row=2, column=0)
+tk.Scale(root, variable=ki, from_=0.001, to=0.01, resolution=0.001, orient=tk.HORIZONTAL).grid(row=2, column=1)
+tk.Label(root, text="Kd:").grid(row=3, column=0)
+tk.Scale(root, variable=kd, from_=0, to=50, resolution=1, orient=tk.HORIZONTAL).grid(row=3, column=1)
+
+tk.Label(root, text="Wartość zadana:").grid(row=4, column=0)
+tk.Scale(root, variable=set_point, from_=5, to=43, resolution=1, orient=tk.HORIZONTAL).grid(row=4, column=1)
+
+tk.Label(root, text="Wartość regulatora PID:").grid(row=5, column=0)
+tk.Label(root, textvariable=global_pid_value).grid(row=5, column=1)
+
+reset_button = tk.Button(root, text="Resetuj wykres", command=reset_plot)
+reset_button.grid(row=6, column=0, columnspan=4)
+
+x_values = []
+y_values = []
+
+threading.Thread(target=read_from_stm, daemon=True).start()
+threading.Thread(target=write_to_stm, daemon=True).start()
+threading.Thread(target=update_plot, daemon=True).start()
+
+root.mainloop()
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1704872307967)
+++ b/.idea/modules.xml	(date 1704872307967)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/naSTM.iml" filepath="$PROJECT_DIR$/.idea/naSTM.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
